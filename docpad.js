// Generated by CoffeeScript 1.6.3
(function() {
  var docpadConfig,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  docpadConfig = {
    renderSingleExtensions: true,
    templateData: {
      site: {
        url: "http://website.com",
        oldUrls: ['www.website.com', 'website.herokuapp.com'],
        title: "Your Website",
        description: "When your website appears in search results in say Google, the text here will be shown underneath your website's title.",
        keywords: "place, your, website, keywoards, here, keep, them, related, to, the, content, of, your, website"
      },
      getPreparedTitle: function() {
        if (this.document.title) {
          return "" + this.document.title + " | " + this.site.title;
        } else {
          return this.site.title;
        }
      },
      getPreparedDescription: function() {
        return this.document.description || this.site.description;
      },
      getPreparedKeywords: function() {
        return this.site.keywords.concat(this.document.keywords || []).join(', ');
      },
      getGruntedStyles: function() {
        var gruntConfig, styles, _;
        _ = require('underscore');
        styles = [];
        gruntConfig = require('./grunt-config.json');
        _.each(gruntConfig, function(value, key) {
          return styles = styles.concat(_.flatten(_.pluck(value, 'src')));
        });
        styles = _.filter(styles, function(value) {
          return value.indexOf('.css') > -1;
        });
        console.log('styles', styles);
        return _.map(styles, function(value) {
          return value.replace('out', '');
        });
      },
      getGruntedScripts: function() {
        var gruntConfig, scripts, _;
        _ = require('underscore');
        scripts = [];
        gruntConfig = require('./grunt-config.json');
        _.each(gruntConfig, function(value, key) {
          return scripts = scripts.concat(_.flatten(_.pluck(value, 'src')));
        });
        scripts = _.filter(scripts, function(value) {
          console.log('value', value);
          return value.indexOf('.js') > -1;
        });
        console.log('scripts', scripts);
        return _.map(scripts, function(value) {
          return value.replace('out', '');
        });
      },
      getStyles: function() {
        return this.getCollection('stylesheet').map(function(model) {
          return model.get('relativeOutPath');
        });
      }
    },
    events: {
      serverExtend: function(opts) {
        var docpad, latestConfig, newUrl, oldUrls, server;
        server = opts.server;
        docpad = this.docpad;
        latestConfig = docpad.getConfig();
        oldUrls = latestConfig.templateData.site.oldUrls || [];
        newUrl = latestConfig.templateData.site.url;
        return server.use(function(req, res, next) {
          var _ref;
          if (_ref = req.headers.host, __indexOf.call(oldUrls, _ref) >= 0) {
            return res.redirect(newUrl + req.url, 301);
          } else {
            return next();
          }
        });
      },
      writeAfter: function(opts, next) {
        var balUtil, command, docpad, rootPath, _;
        docpad = this.docpad;
        rootPath = docpad.config.rootPath;
        balUtil = require('bal-util');
        _ = require('underscore');
        command = ["" + rootPath + "/node_modules/.bin/grunt", 'default'];
        next();
        return this;
      }
    }
  };

  module.exports = docpadConfig;

}).call(this);
